name: Windows

on:
  push:
    branches:
      - dev
      - master
  pull_request:

jobs:
  mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]
        build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 

    steps:
      - uses: actions/checkout@v2
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.architecture }}

      - name: CMake
        run: |
          cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARROW_BUILDTESTS=On

      - name: Build
        run: |
          cmake --build build --parallel 10

      - name: Test
        run: cd build ; ctest -j 10 -C ${{ matrix.build_type }} --output-on-failure

  MSVC2017:
    runs-on: windows-2016
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v2
    - name: CMake
      if: matrix.build_type == 'Release' && matrix.architecture == 'x64'
      run: |
        cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }} -DARROW_BUILDTESTS=On -DCMAKE_EXE_LINKER_FLAGS="/STACK:4000000"
      
    - name: CMake
      if: matrix.build_type == 'Release' && matrix.architecture != 'x64'
      run: |
        cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }} -DARROW_BUILDTESTS=On

    - name: CMake
      run: |
        cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }} -DARROW_BUILDTESTS=On
      
    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel 10

    - name: Test
      run: |
        cd build ; ctest -j 10 -C ${{ matrix.build_type }} --output-on-failure


  MSVC2017_latest:
    runs-on: windows-2016

    steps:
    - uses: actions/checkout@v2
    - name: CMake
      run: |
        cmake -S . -B build -G "Visual Studio 15 2017" -DARROW_BUILDTESTS=On -DCMAKE_C_FLAGS="/permissive- /std:c11 /utf-8 /W4"

    - name: Build
      run: |
        cmake --build build --config Release --parallel 10

    - name: Test
      run: |
        cd build ; ctest -j 10 -C Release --output-on-failure


  MSVC2019:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v2
    - name: CMake
      run: |
        cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -DARROW_BUILDTESTS=On
      
    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel 10

    - name: Test
      run: |
        cd build ; ctest -j 10 -C ${{ matrix.build_type }} --output-on-failure


  MSVC2019_latest:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: CMake
      run: |
        cmake -S . -B build -G "Visual Studio 16 2019" -DARROW_BUILDTESTS=On -DCMAKE_C_FLAGS="/permissive- /std:c++latest /utf-8 /W4"

    - name: Build
      run: |
        cmake --build build --config ${{matrix.build_type}} --parallel 10

    - name: Test
      run: |
        cd build ; ctest -j 10 -C Release --output-on-failure


  Clang:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
        version: [10, 11]

    steps:
      - uses: actions/checkout@v2
      - name: Install Clang
        run: |
          curl -fsSL -o LLVM${{ matrix.version }}.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.version }}.0.0/LLVM-${{ matrix.version }}.0.0-win64.exe ; 7z x LLVM${{ matrix.version }}.exe -y -o"C:/Program Files/LLVM"

      - name: CMake
        run: |
          cmake -S . -B build -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -G"MinGW Makefiles" -D CMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARROW_BUILDTESTS=On

      - name: Build
        run: |
          cmake --build build --parallel 10

      - name: Test
        run: |
          cd build ; ctest -j 10 -C ${{ matrix.build_type }} --exclude-regex "test-unicode" --output-on-failure


  Clang-cl-11:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
        architecture: [Win32, x64]

    steps:
      - uses: actions/checkout@v2
      - name: CMake
        run: |
          cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -T ClangCL -DARROW_BUILDTESTS=On
      - name: Build
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel 10
      - name: Test
        run: |
          cd build ; ctest -j 10 -C ${{ matrix.build_type }} --exclude-regex "test-unicode" --output-on-failure