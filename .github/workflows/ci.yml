name: CI
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        # build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
        build_type: [Release] 
        compiler: [default, clang, gcc]
        exclude:
          - {os: "ubuntu-latest", compiler: "default"}
          - {os: "ubuntu-latest", compiler: "clang"}
          - {os: "macOS-latest", compiler: "gcc"}  # not needed
          - {os: "macOS-latest", compiler: "clang"} # handled by `default`
          
    runs-on: ${{ matrix.os }}
    
    steps: 
      - uses: actions/checkout@v1

      - name: Create the Build Folder
        run: |
          mkdir ${{github.workspace}}/build
        
      - name: Set up Compilers on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y gcc-11 g++-10 clang-10

      - name: Default Platform Compiler
        shell: bash
        if: (matrix.compiler == 'default') && !(matrix.os == 'windows-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      
      # Slight hack when it comes to building on using Windows on Github runners 
      # CMake apparently defaults to an older Windows SDK Version that has quite a few bugs which lead to compilation
      # bugs. 
      # After *hours* of work trying to track down this issue (and also a lil' help from the StackOverflow question below), 
      # we need to force CMake to choose a later SDK version
      # SO link: https://stackoverflow.com/questions/65402366/c5105-and-other-compiler-warnings-when-building-with-github-actions-winsdk-10
      - name: Default Windows Compiler
        shell: bash
        if: (matrix.compiler == 'default') && (matrix.os == 'windows-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_SYSTEM_VERSION="10.0.18362.0"

      - name: GCC (Ubuntu)
        shell: bash
        if: (matrix.compiler == 'gcc') && (matrix.os == 'ubuntu-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-10

      - name: GCC (Windows)
        shell: bash
        if: (matrix.compiler == 'gcc') && (matrix.os == 'windows-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_SYSTEM_VERSION="10.0.18362.0"

      - name: Clang (Ubuntu)
        shell: bash
        if: (matrix.compiler == 'clang') && (matrix.os == 'ubuntu-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++-10

      - name: Clang (Windows)
        shell: bash
        if: (matrix.compiler == 'clang') && (matrix.os == 'windows-latest')
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=clang-cl -DCMAKE_SYSTEM_VERSION="10.0.18362.0"

      - name: Build
        shell: bash
        run: |
          cmake --build build/ --config ${{ matrix.build_type }}
      
      - name: Test (Windows)
        if: (matrix.os == 'windows-latest')
        run: cd build/test/${{matrix.build_type}}; ./MuonInternalTests
      
      - name: Test (GCC/Clang)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          cd build/test && ./MuonInternalTests